"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express = require("express");
const http = require("http");
const path = require("path");
const socketIo = require("socket.io");
const watch = require("watchjs");
const logger_1 = require("./logger");
const s3ToAdlDataCopy_1 = require("./s3ToAdlDataCopy");
const app = express();
const server = http.createServer(app);
const port = process.env.PORT || 4200;
const io = socketIo(server).listen(server);
server.listen(port, () => {
    console.log("Running server on port %s", port);
});
const s3ToAdlDataCopy = new s3ToAdlDataCopy_1.S3ToAdlDataCopy();
s3ToAdlDataCopy.handler(() => {
    server.close();
    process.exit();
});
app.use(express.static(path.resolve(__dirname + "/public")));
app.get("/", function (req, res, next) {
    res.sendFile(path.resolve(__dirname + "/index.html"));
});
io.on("connection", function (socket) {
    logger_1.winston.verbose("Connected successfully to the socket ...");
    io.sockets.emit("batchChange", s3ToAdlDataCopy.copyProperties);
});
watch.watch(s3ToAdlDataCopy.copyProperties, ["batchNumber", "uploadedCount"], () => {
    io.sockets.emit("batchChange", s3ToAdlDataCopy.copyProperties);
});
logger_1.winston.stream().on("log", function (log) {
    io.sockets.emit("log", log);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUFtQztBQUNuQyw2QkFBNkI7QUFDN0IsNkJBQTZCO0FBQzdCLHNDQUFzQztBQUN0QyxpQ0FBaUM7QUFDakMscUNBQW1DO0FBQ25DLHVEQUFvRDtBQUVwRCxNQUFNLEdBQUcsR0FBd0IsT0FBTyxFQUFFLENBQUM7QUFDM0MsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN0QyxNQUFNLElBQUksR0FBVyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUM7QUFDOUMsTUFBTSxFQUFFLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUUzQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRTtJQUNoQixPQUFPLENBQUMsR0FBRyxDQUFDLDJCQUEyQixFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ25ELENBQUMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxlQUFlLEdBQUcsSUFBSSxpQ0FBZSxFQUFFLENBQUM7QUFDOUMsZUFBZSxDQUFDLE9BQU8sQ0FBQztJQUNwQixNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDZixPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDbkIsQ0FBQyxDQUFDLENBQUM7QUFFSCxHQUFHLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRTdELEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLFVBQVUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJO0lBQ2pDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEdBQUcsYUFBYSxDQUFDLENBQUMsQ0FBQztBQUMxRCxDQUFDLENBQUMsQ0FBQztBQUVILEVBQUUsQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLFVBQVUsTUFBTTtJQUNoQyxnQkFBTyxDQUFDLE9BQU8sQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDO0lBQzVELEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxlQUFlLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDbkUsQ0FBQyxDQUFDLENBQUM7QUFFSCxLQUFLLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxhQUFhLEVBQUUsZUFBZSxDQUFDLEVBQUU7SUFDMUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLGVBQWUsQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUNuRSxDQUFDLENBQUMsQ0FBQztBQUVILGdCQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxVQUFVLEdBQUc7SUFDcEMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ2hDLENBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6InNyYy9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGV4cHJlc3MgZnJvbSBcImV4cHJlc3NcIjtcclxuaW1wb3J0ICogYXMgaHR0cCBmcm9tIFwiaHR0cFwiO1xyXG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gXCJwYXRoXCI7XHJcbmltcG9ydCAqIGFzIHNvY2tldElvIGZyb20gXCJzb2NrZXQuaW9cIjtcclxuaW1wb3J0ICogYXMgd2F0Y2ggZnJvbSBcIndhdGNoanNcIjtcclxuaW1wb3J0IHsgd2luc3RvbiB9IGZyb20gXCIuL2xvZ2dlclwiO1xyXG5pbXBvcnQgeyBTM1RvQWRsRGF0YUNvcHkgfSBmcm9tIFwiLi9zM1RvQWRsRGF0YUNvcHlcIjtcclxuXHJcbmNvbnN0IGFwcDogZXhwcmVzcy5BcHBsaWNhdGlvbiA9IGV4cHJlc3MoKTtcclxuY29uc3Qgc2VydmVyID0gaHR0cC5jcmVhdGVTZXJ2ZXIoYXBwKTtcclxuY29uc3QgcG9ydDogbnVtYmVyID0gcHJvY2Vzcy5lbnYuUE9SVCB8fCA0MjAwO1xyXG5jb25zdCBpbyA9IHNvY2tldElvKHNlcnZlcikubGlzdGVuKHNlcnZlcik7XHJcblxyXG5zZXJ2ZXIubGlzdGVuKHBvcnQsICgpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKFwiUnVubmluZyBzZXJ2ZXIgb24gcG9ydCAlc1wiLCBwb3J0KTtcclxufSk7XHJcblxyXG5jb25zdCBzM1RvQWRsRGF0YUNvcHkgPSBuZXcgUzNUb0FkbERhdGFDb3B5KCk7XHJcbnMzVG9BZGxEYXRhQ29weS5oYW5kbGVyKCgpID0+IHtcclxuICAgIHNlcnZlci5jbG9zZSgpO1xyXG4gICAgcHJvY2Vzcy5leGl0KCk7XHJcbn0pO1xyXG5cclxuYXBwLnVzZShleHByZXNzLnN0YXRpYyhwYXRoLnJlc29sdmUoX19kaXJuYW1lICsgXCIvcHVibGljXCIpKSk7XHJcblxyXG5hcHAuZ2V0KFwiL1wiLCBmdW5jdGlvbiAocmVxLCByZXMsIG5leHQpIHtcclxuICAgIHJlcy5zZW5kRmlsZShwYXRoLnJlc29sdmUoX19kaXJuYW1lICsgXCIvaW5kZXguaHRtbFwiKSk7XHJcbn0pO1xyXG5cclxuaW8ub24oXCJjb25uZWN0aW9uXCIsIGZ1bmN0aW9uIChzb2NrZXQpIHtcclxuICAgIHdpbnN0b24udmVyYm9zZShcIkNvbm5lY3RlZCBzdWNjZXNzZnVsbHkgdG8gdGhlIHNvY2tldCAuLi5cIik7XHJcbiAgICBpby5zb2NrZXRzLmVtaXQoXCJiYXRjaENoYW5nZVwiLCBzM1RvQWRsRGF0YUNvcHkuY29weVByb3BlcnRpZXMpO1xyXG59KTtcclxuXHJcbndhdGNoLndhdGNoKHMzVG9BZGxEYXRhQ29weS5jb3B5UHJvcGVydGllcywgW1wiYmF0Y2hOdW1iZXJcIiwgXCJ1cGxvYWRlZENvdW50XCJdLCAoKSA9PiB7XHJcbiAgICBpby5zb2NrZXRzLmVtaXQoXCJiYXRjaENoYW5nZVwiLCBzM1RvQWRsRGF0YUNvcHkuY29weVByb3BlcnRpZXMpO1xyXG59KTtcclxuXHJcbndpbnN0b24uc3RyZWFtKCkub24oXCJsb2dcIiwgZnVuY3Rpb24gKGxvZykge1xyXG4gICAgaW8uc29ja2V0cy5lbWl0KFwibG9nXCIsIGxvZyk7XHJcbn0pOyJdLCJzb3VyY2VSb290IjoiLi4ifQ==
