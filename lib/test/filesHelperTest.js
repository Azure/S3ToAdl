"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const fs = require("fs");
require("mocha");
const filesHelper_1 = require("../src/filesHelper");
describe("getDirectoriesPathArray tests", () => {
    it("getDirectoriesPathArray returns the expected path", () => {
        // given
        let path = "dir1/dir2/dir3/file.txt";
        let expectedResult = ["dir1", "dir2", "dir3"];
        // act
        let result = filesHelper_1.getDirectoriesPathArray(path);
        // assert
        chai_1.expect(expectedResult).to.deep.equal(result);
    });
    it("getDirectoriesPathArray returns empty string for file name without path", () => {
        // given
        let path = "file.txt";
        let expectedResult = [];
        // act
        let result = filesHelper_1.getDirectoriesPathArray(path);
        // assert
        chai_1.expect(expectedResult).to.deep.equal(result);
    });
});
describe("createDirIfNotExists tests", () => {
    it("createDirIfNotExists creates the expected dir for given file path and dir name", () => {
        // given
        let path = "./";
        let dirName = "newdir";
        // act
        filesHelper_1.createDirIfNotExists(path, dirName);
        // assert
        const fullPath = path + dirName;
        chai_1.expect(fs.existsSync(fullPath)).to.equal(true);
        fs.rmdir(fullPath, (err) => {
            chai_1.expect(err).to.equal(null);
        });
    });
    it("createDirIfNotExists creates the expected dir for given file path and dir name", () => {
        // given
        let path = "./newdir";
        // act
        filesHelper_1.createDirIfNotExists(null, null, path);
        // assert
        chai_1.expect(fs.existsSync(path)).to.equal(true);
        fs.rmdir(path, (err) => {
            chai_1.expect(err).to.equal(null);
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3Rlc3QvZmlsZXNIZWxwZXJUZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQThCO0FBQzlCLHlCQUF5QjtBQUN6QixpQkFBZTtBQUVmLG9EQUErRjtBQUUvRixRQUFRLENBQUMsK0JBQStCLEVBQUU7SUFDdEMsRUFBRSxDQUFDLG1EQUFtRCxFQUFFO1FBQ3BELFFBQVE7UUFDUixJQUFJLElBQUksR0FBRyx5QkFBeUIsQ0FBQztRQUNyQyxJQUFJLGNBQWMsR0FBRyxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFOUMsTUFBTTtRQUNOLElBQUksTUFBTSxHQUFHLHFDQUF1QixDQUFDLElBQUksQ0FBQyxDQUFDO1FBRTNDLFNBQVM7UUFDVCxhQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDakQsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMseUVBQXlFLEVBQUU7UUFDMUUsUUFBUTtRQUNSLElBQUksSUFBSSxHQUFHLFVBQVUsQ0FBQztRQUN0QixJQUFJLGNBQWMsR0FBRyxFQUFFLENBQUM7UUFFeEIsTUFBTTtRQUNOLElBQUksTUFBTSxHQUFHLHFDQUF1QixDQUFDLElBQUksQ0FBQyxDQUFDO1FBRTNDLFNBQVM7UUFDVCxhQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDakQsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQztBQUVILFFBQVEsQ0FBQyw0QkFBNEIsRUFBRTtJQUNuQyxFQUFFLENBQUMsZ0ZBQWdGLEVBQUU7UUFDakYsUUFBUTtRQUNSLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQztRQUNoQixJQUFJLE9BQU8sR0FBRyxRQUFRLENBQUM7UUFFdkIsTUFBTTtRQUNOLGtDQUFvQixDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztRQUVwQyxTQUFTO1FBQ1QsTUFBTSxRQUFRLEdBQUcsSUFBSSxHQUFHLE9BQU8sQ0FBQztRQUNoQyxhQUFNLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0MsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxHQUFHO1lBQ25CLGFBQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQy9CLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsZ0ZBQWdGLEVBQUU7UUFDakYsUUFBUTtRQUNSLElBQUksSUFBSSxHQUFHLFVBQVUsQ0FBQztRQUV0QixNQUFNO1FBQ04sa0NBQW9CLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUV2QyxTQUFTO1FBQ1QsYUFBTSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNDLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBRztZQUNmLGFBQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQy9CLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L2ZpbGVzSGVscGVyVGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4cGVjdCB9IGZyb20gXCJjaGFpXCI7XHJcbmltcG9ydCAqIGFzIGZzIGZyb20gXCJmc1wiO1xyXG5pbXBvcnQgXCJtb2NoYVwiO1xyXG5pbXBvcnQgKiBhcyBzaW5vbiBmcm9tIFwic2lub25cIjtcclxuaW1wb3J0IHsgY3JlYXRlRGlySWZOb3RFeGlzdHMsIGRlbGV0ZUZpbGUsIGdldERpcmVjdG9yaWVzUGF0aEFycmF5IH0gZnJvbSBcIi4uL3NyYy9maWxlc0hlbHBlclwiO1xyXG5cclxuZGVzY3JpYmUoXCJnZXREaXJlY3Rvcmllc1BhdGhBcnJheSB0ZXN0c1wiLCAoKSA9PiB7XHJcbiAgICBpdChcImdldERpcmVjdG9yaWVzUGF0aEFycmF5IHJldHVybnMgdGhlIGV4cGVjdGVkIHBhdGhcIiwgKCkgPT4ge1xyXG4gICAgICAgIC8vIGdpdmVuXHJcbiAgICAgICAgbGV0IHBhdGggPSBcImRpcjEvZGlyMi9kaXIzL2ZpbGUudHh0XCI7XHJcbiAgICAgICAgbGV0IGV4cGVjdGVkUmVzdWx0ID0gW1wiZGlyMVwiLCBcImRpcjJcIiwgXCJkaXIzXCJdO1xyXG5cclxuICAgICAgICAvLyBhY3RcclxuICAgICAgICBsZXQgcmVzdWx0ID0gZ2V0RGlyZWN0b3JpZXNQYXRoQXJyYXkocGF0aCk7XHJcblxyXG4gICAgICAgIC8vIGFzc2VydFxyXG4gICAgICAgIGV4cGVjdChleHBlY3RlZFJlc3VsdCkudG8uZGVlcC5lcXVhbChyZXN1bHQpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoXCJnZXREaXJlY3Rvcmllc1BhdGhBcnJheSByZXR1cm5zIGVtcHR5IHN0cmluZyBmb3IgZmlsZSBuYW1lIHdpdGhvdXQgcGF0aFwiLCAoKSA9PiB7XHJcbiAgICAgICAgLy8gZ2l2ZW5cclxuICAgICAgICBsZXQgcGF0aCA9IFwiZmlsZS50eHRcIjtcclxuICAgICAgICBsZXQgZXhwZWN0ZWRSZXN1bHQgPSBbXTtcclxuXHJcbiAgICAgICAgLy8gYWN0XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IGdldERpcmVjdG9yaWVzUGF0aEFycmF5KHBhdGgpO1xyXG5cclxuICAgICAgICAvLyBhc3NlcnRcclxuICAgICAgICBleHBlY3QoZXhwZWN0ZWRSZXN1bHQpLnRvLmRlZXAuZXF1YWwocmVzdWx0KTtcclxuICAgIH0pO1xyXG59KTtcclxuXHJcbmRlc2NyaWJlKFwiY3JlYXRlRGlySWZOb3RFeGlzdHMgdGVzdHNcIiwgKCkgPT4ge1xyXG4gICAgaXQoXCJjcmVhdGVEaXJJZk5vdEV4aXN0cyBjcmVhdGVzIHRoZSBleHBlY3RlZCBkaXIgZm9yIGdpdmVuIGZpbGUgcGF0aCBhbmQgZGlyIG5hbWVcIiwgKCkgPT4ge1xyXG4gICAgICAgIC8vIGdpdmVuXHJcbiAgICAgICAgbGV0IHBhdGggPSBcIi4vXCI7XHJcbiAgICAgICAgbGV0IGRpck5hbWUgPSBcIm5ld2RpclwiO1xyXG5cclxuICAgICAgICAvLyBhY3RcclxuICAgICAgICBjcmVhdGVEaXJJZk5vdEV4aXN0cyhwYXRoLCBkaXJOYW1lKTtcclxuXHJcbiAgICAgICAgLy8gYXNzZXJ0XHJcbiAgICAgICAgY29uc3QgZnVsbFBhdGggPSBwYXRoICsgZGlyTmFtZTtcclxuICAgICAgICBleHBlY3QoZnMuZXhpc3RzU3luYyhmdWxsUGF0aCkpLnRvLmVxdWFsKHRydWUpO1xyXG4gICAgICAgIGZzLnJtZGlyKGZ1bGxQYXRoLCAoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgIGV4cGVjdChlcnIpLnRvLmVxdWFsKG51bGwpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoXCJjcmVhdGVEaXJJZk5vdEV4aXN0cyBjcmVhdGVzIHRoZSBleHBlY3RlZCBkaXIgZm9yIGdpdmVuIGZpbGUgcGF0aCBhbmQgZGlyIG5hbWVcIiwgKCkgPT4ge1xyXG4gICAgICAgIC8vIGdpdmVuXHJcbiAgICAgICAgbGV0IHBhdGggPSBcIi4vbmV3ZGlyXCI7XHJcblxyXG4gICAgICAgIC8vIGFjdFxyXG4gICAgICAgIGNyZWF0ZURpcklmTm90RXhpc3RzKG51bGwsIG51bGwsIHBhdGgpO1xyXG5cclxuICAgICAgICAvLyBhc3NlcnRcclxuICAgICAgICBleHBlY3QoZnMuZXhpc3RzU3luYyhwYXRoKSkudG8uZXF1YWwodHJ1ZSk7XHJcbiAgICAgICAgZnMucm1kaXIocGF0aCwgKGVycikgPT4ge1xyXG4gICAgICAgICAgICBleHBlY3QoZXJyKS50by5lcXVhbChudWxsKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59KTsiXSwic291cmNlUm9vdCI6Ii4uIn0=
